# -*- coding: utf-8 -*-


Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VYFYx-XD4dyUhCy2G-B4Xhn2IQiRBUIJ



**Penjelasan dari setiap variabel dalam data**:
1. Outlook: Variabel ini mencerminkan kondisi cuaca pada hari tersebut. Terdapat tiga nilai yang mungkin: "Sunny" (cerah), "Overcast" (berawan), dan "Rainy" (hujan). Variabel ini mempengaruhi keputusan untuk bermain golf (variabel x1).  
2. Temperature: Merupakan suhu udara pada hari tersebut. Terdapat tiga nilai yang mungkin: "Hot" (panas), "Mild" (hangat), dan "Cool" (sejuk). Variabel ini mempengaruhi keputusan untuk bermain golf (variabel x2).   
3. Humidity: Merupakan tingkat kelembapan udara pada hari tersebut. Terdapat dua nilai yang mungkin: "High" (tinggi) dan "Normal" (normal). Variabel ini mempengaruhi keputusan untuk bermain golf (variabel x3).  
4. Wind: Variabel ini mencerminkan kekuatan angin pada hari tersebut. Terdapat dua nilai yang mungkin: "Weak" (lemah) dan "Strong" (kuat). Variabel ini mempengaruhi keputusan untuk bermain golf (variabel x4).  
5. PlayGolf: Variabel target yang ingin diprediksi oleh model. Terdapat dua nilai yang mungkin: "Yes" (ya, bermain golf) dan "No" (tidak, tidak bermain golf). Variabel ini merupakan hasil dari keputusan bermain golf yang dipengaruhi oleh kondisi cuaca seperti yang dijelaskan oleh variabel sebelumnya (variabel y).

## **IMPORT LIBRARY**
"""

import pandas as pd   # Untuk Manipulasi Data
from matplotlib import pyplot as plt # Untuk Visualisasi Data
from sklearn import datasets   # Untuk Pembelajaran Mesin
import sklearn.datasets as datasets  # Untuk Pembelajaran Mesin
from sklearn.model_selection import train_test_split  # Untuk Pra PemrosesanData
from sklearn.ensemble import RandomForestClassifier  # Untuk Pembelajaran Mesin
from sklearn.metrics import classification_report  # Untuk Evaluasi Model
from sklearn.tree import DecisionTreeClassifier, plot_tree  # Untuk Pembelajaran Mesin
from sklearn.preprocessing import LabelEncoder  # UntukPra Pemrosesan Data
import seaborn as sns  # Untuk Visualisasi Data

import warnings  # Mengimpor modul warnings yang digunakan untuk mengelola peringatan dalam Python.

warnings.filterwarnings('ignore')  # Mengatur penanganan peringatan dalam kode.
                                   # Dengan argumen 'ignore', peringatan akan diabaikan dan tidak akan ditampilkan saat program berjalan.

"""## **IMPORT DATASET**"""

df = pd.read_csv('/content/playgolf_data.csv')  #Baca Data CSV
df.head()  #Tampilkan Data Awal

"""## **DATA EXPLORATION**

CHECK MISSING VALUE
"""

df.isnull().any() # Cek Data Kosong

"""* Tidak ada missing value terhadap data

CHECK DATA TYPES
"""

df.info()  #Info Data Frame

"""CHECK UNIQUE VALUE"""

print(df["Outlook"].unique())  #Unik Outlook
print(df["Temperature"].unique())  #Unik Suhu
print(df["Humidity"].unique())  #Unik Kelembapan
print(df["Wind"].unique())  #Unik Angin
print(df["PlayGolf"].unique())  #Unik MainGolf

"""## **DUMMY VARIABLE**"""

# Mengubah variabel kategorik menjadi dummy variabel

df_getdummy=pd.get_dummies(data=df, columns=['Temperature', 'Humidity', 'Outlook', 'Wind'])
df_getdummy  # Mencetak DataFrame yang telah dimodifikasi

"""## **DECISION TREE**

### Accuracy Prediction
"""

# Memisahkan data train dan test

from sklearn.model_selection import train_test_split   # Mengimpor fungsi train_test_split dari modul scikit-learn

# Memisahkan fitur (X) dan target (y) dari DataFrame yang telah dimodifikasi
X = df_getdummy.drop('PlayGolf',axis=1)    # Memilih semua fitur kecuali 'PlayGolf' sebagai X
y = df_getdummy['PlayGolf']                # Memilih kolom 'PlayGolf' sebagai target (y)

# Membagi data menjadi data latih dan data uji sebesar 30% dan menetapkan seed acak
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

from sklearn import tree  # Mengimpor modul tree dari library sklearn
from sklearn.model_selection import train_test_split  # Mengimpor fungsi train_test_split dari sklearn.model_selection

# Mengasumsi 'df'sebagai data frame yang sudah diproses sebelumnya
# Memisahkan DataFrame menjadi fitur (X) dan variabel target (y)
X = df.drop('PlayGolf', axis=1)  # Memilih semua fitur kecuali 'PlayGolf' sebagai X
y = df['PlayGolf']  # Memilih kolom 'PlayGolf' sebagai target (y)

# Mengkodekan fitur kategorikal karena DecisionTreeClassifier tidak dapat menangani nilai string secara langsung
X_encoded = pd.get_dummies(X, columns=['Outlook', 'Temperature', 'Humidity', 'Wind'])

# Memisahkan data menjadi data latih dan data uji
X_train, X_test, Y_train, Y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Menginisialisasi DecisionTreeClassifier
DT = tree.DecisionTreeClassifier()

# Melatih model
DT = DT.fit(X_train, Y_train)

# DT adalah Decision Tree Classifier yang telah dilatih sekarang

# Prediksi menggunakan model Decision Tree terhadap data uji (X_test)
DT.predict(X_test)

# Menyimpan hasil prediksi dalam variabel prediction
prediction = DT.predict(X_test)

# Prediksi menggunakan model Decision Tree terhadap data uji (X_test)
prediction = DT.predict(X_test)

# Menampilkan hasil prediksi
prediction

#  Menampilkan hasil prediksi klasifikasi
print(classification_report(Y_test, prediction))

"""* Model ini menunjukkan performa yang sangat baik pada seluruh metrik yang diuji, dengan mencatat skor sempurna untuk presisi, recall, dan F1-score di semua kelas. Hal ini menandakan bahwa model ini sangat akurat dan dapat diandalkan dalam membuat prediksi. Skor akurasi yang sempurna, yaitu **1.00**, menunjukkan bahwa model sangat sesuai dengan data pengujian.

### Desicion Tree Diagram
"""

# Melakukan import Decision Tree dengan menggunkana sklean

from sklearn.tree import DecisionTreeClassifier   # Mengimpor DecisionTreeClassifier dari scikit-learn

# Membuat objek DecisionTreeClassifier dengan kriteria 'entropy' dan kedalaman maksimum 2
dtree = DecisionTreeClassifier(criterion='entropy',max_depth=2)

# Melatih model DecisionTreeClassifier menggunakan data latih
dtree.fit(X_train,Y_train)

# Melakukan prediksi menggunakan data uji
predictions = dtree.predict(X_test)

from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

# Training the DecisionTreeClassifier
dtree = DecisionTreeClassifier(criterion='entropy', max_depth=2, random_state=42)
dtree.fit(X_train, Y_train)
predictions = dtree.predict(X_test)

# Visualizing the decision tree
fig = plt.figure(figsize=(16, 12))
plot_tree(dtree, feature_names=X_train.columns, class_names=['Not_Play', 'Play'], filled=True, fontsize=12)
plt.show()

"""#### **Interpretasi**:
Pada tingkat pertama, kita memiliki 11 sampel dan pertanyaan utama yang berhubungan dengan cuaca: Apakah cuaca mendung? Jika tidak (nilai 'Outlook_Overcast' ≤ 0.5), kita beralih ke cabang kiri yang berisi 8 sampel dengan entropi sempurna 1.0, menandakan campuran yang seimbang antara kemungkinan bermain dan tidak bermain golf (masing-masing 4 sampel). Cabang ini lebih terbagi berdasarkan kelembaban. Jika kelembaban tidak normal, maka semua 3 sampel yang tersisa di cabang paling kanan dengan entropi 0 (situasi homogen) mengarah pada keputusan untuk bermain golf.

Sebaliknya, jika cuaca mendung, kita beralih ke cabang kanan dengan 3 sampel yang semuanya mengarah pada keputusan untuk bermain golf (entropi 0, situasi homogen). Ini menunjukkan bahwa dalam data latihan, setiap kali cuaca mendung, orang selalu memilih untuk bermain golf.

Secara keseluruhan, pohon keputusan ini menggambarkan bahwa dalam kondisi cuaca tertentu, yaitu tidak mendung dan kelembaban normal, kecenderungan untuk tidak bermain golf cukup tinggi, sementara dalam kondisi mendung, kecenderungan untuk bermain golf sangat tinggi, tanpa memandang faktor lain.

## **RANDOM FOREST**
"""

#Baca Data CSV
data = pd.read_csv("/content/playgolf_data.csv")

# Menampilkan data
data.head()

# Mengkonversi variabel kategorikal menjadi variabel dummy/indikator

data_getdummy=pd.get_dummies(data=data, columns=['Temperature', 'Humidity', 'Outlook', 'Wind'], drop_first = True)
data_getdummy   # Mencetak DataFrame yang telah dimodifikasi

"""### Accuracy Prediction"""

import sklearn    # Mengimpor modul
from sklearn.model_selection import train_test_split   # Membagi data menjadi data latih dan data uji

# Separating the y-column from the rest of the data
df2 = data_getdummy.drop("PlayGolf", axis=1)   # Menghapus kolom "PlayGolf" dari DataFrame dan menyimpannya ke df2

# Menetapkan fitur-fitur (X) dari DataFrame df2
X = df2

# Menetapkan variabel target (y) dari kolom "PlayGolf" dalam DataFrame data_getdummy
y = data_getdummy["PlayGolf"]

# Melakukan Pembagian Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)  # Membagi data menjadi data latih dan data uji

# Fitting a Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier

# Specifying the random forest - n_estimator specifies the number of trees
rfc = RandomForestClassifier(n_estimators=1000)
rfc.fit(X_train, y_train)

# Getting our Predictions
y_hat = rfc.predict(X_test)  # Melakukan prediksi menggunakan model Random Forest terhadap data uji

# Importing necessary functions for evaluation
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score  # Mengimpor fungsi evaluasi

# Creating series for actual values
y_actu = pd.Series(y_test, name='Actual')  # Membuat series dari y_test untuk menampilkan nilai aktual

# Calculating and displaying the confusion matrix
df_confusion = pd.crosstab(y_actu, y_hat, normalize=True)  # Membuat tabel silang yang dinormalisasi untuk membandingkan hasil aktual dan prediksi
print(df_confusion)  # Menampilkan tabel silang

# Calculating and displaying accuracy
acc = accuracy_score(y_test, y_hat)  # Menghitung akurasi model
print('Model Accuracy: %.2f' % acc)  # Menampilkan akurasi model

# Generating and displaying the classification report
print(classification_report(y_test, y_hat))  # Menampilkan laporan klasifikasi yang meliputi precision, recall, f1-score, dan support

"""* Model ini menunjukkan performa yang cukup baik pada sebagian besar metrik yang diuji, dengan mencatat skor yang relatif tinggi untuk presisi, recall, dan F1-score di semua kelas. Hal ini menandakan bahwa model ini dapat memberikan prediksi yang layak dalam kebanyakan kasus. Meskipun demikian, skor akurasi yang tidak sempurna, yaitu **0.60**, menunjukkan bahwa model tidak selalu sesuai dengan data pengujian. Penting untuk dicatat bahwa hasilnya bisa berubah-ubah karena adanya randomisasi dalam penentuan keakurasiaannya.

### Random Forest Diagram
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Training the RandomForestClassifier
rfc = RandomForestClassifier(criterion='entropy', max_depth=2, n_estimators=1000, random_state=42)
rfc.fit(X_train, y_train)
predictions = rfc.predict(X_test)

# Visualising one of the decision trees in the random forest
# Extract single tree
single_tree = rfc.estimators_[0]        # Mengambil satu decision tree dari random forest
fig = plt.figure(figsize=(16,12))       # Membuat objek gambar dengan ukuran tertentu
plot_tree(single_tree, feature_names=X_train.columns, fontsize=12, filled=True,
          class_names=['Not_Play', 'Play'])                                         # Visualisasi decision tree
plt.show()     # Menampilkan gambar plot decision tree

"""#### **Interpretasi**:
Di node puncak, kita melihat kondisi cuaca hujan dengan 6 sampel yang memiliki entropi 0.764, menandakan keragaman dalam data. Lebih dari setengah sampel (4 dari 6) memiliki hasil ‘Play’. Jika cuaca tidak hujan, kita pergi ke cabang kiri, di mana jika matahari tidak terlalu terik (Outlook_Sunny ≤ 0.5), keputusan cenderung untuk bermain golf ('Play'), dengan 5 dari 6 sampel mengarah ke keputusan ini.

Ketika matahari terik (Outlook_Sunny > 0.5), dua sampel terbagi sempurna dengan salah satunya memilih untuk tidak bermain ('Not_Play') dan satunya lagi memilih untuk bermain golf ('Play'), menghasilkan entropi 1 yang menunjukkan ketidakpastian maksimal.

Kembali ke node puncak, jika cuaca hujan, maka kita melihat ke kanan, ke kondisi angin. Jika angin tidak kuat (Wind_Weak ≤ 0.5), terdapat ketidakpastian tinggi (entropi 0.918), dengan dua sampel memilih untuk bermain ('Play').

Namun, jika kita melihat ke kanan lagi ke kondisi angin yang kuat (Wind_Weak > 0.5), setiap sampel mengarah pada keputusan yang homogen: satu untuk tidak bermain ('Not_Play') dan satu lagi untuk bermain golf ('Play'), masing-masing dengan entropi 0 yang menunjukkan kepastian penuh.

Pohon keputusan ini menggambarkan bahwa kombinasi kondisi cuaca hujan dan kekuatan angin adalah faktor kunci dalam memprediksi keputusan bermain golf, dengan variasi kondisi menghasilkan hasil yang berbeda-beda.

#### **Kesimpulan**:
#### Dalam kasus ini, Model Decision Tree menunjukkan performa yang lebih baik daripada Model Random Forest.
"""